-------------------------------------------
--- Welcome to <unnamed_rocket_project> ---
-------------------------------------------

Overarching goal: launch a liquid fueled rocket to an altitude of 5 Kilometers 
Fuel/Ox: tentatively choose LOX/Ethanol (likely cut with water) 

Baseline engine - 500 psi chamber pressure; 500 lbf thrust
Sike: metric is best - Pc = 35.0 Bar; Thrust = 2500 N

04/11/21 Notes: 
Created vehicle sizing sheet: https://docs.google.com/spreadsheets/d/1_JpSu5tf8uLEPQL55E6V6bl5wYNb7TbPpZ7GwXi8rC0/edit?usp=sharing
Rough 1D trajectory sim ~6.5km with loosey goosey 0.75 drag coeff - need to ultimately sim in open rocket

ballpark ISP 230 - 250 sec 
assume 20% injector stiffness

# Design Specs:
Pc = 35 bar

TODO: (# NOTESSSS)
# documentation:
- move from gdrive -> libreoffice? - consolidate on github
-

# math/analysis
- isentropic blowdown - what volume of pressurant is needed
-- GN2 - try to spec for 2000psi due to supply bottle constraints
-- isenthalpic expansion thru reg
--- compare both
-- Try to spec for lowflow aqua env - hand loaded

# development:
- DAQ research - NI 6000 vs. Teensy/Custom
-- Like benchtop custom solution best as its completely open source. but I also have money.... and not as much free time
-- fun weekend project & teach self electronics as pro for Teensy




DUMMPER:
def HT_1D_solve_bartz(chamber,i,
                      T0,k,b_const,cond_w,
                      T_aw,t_w,
                      convergence = 0.005,
                      Tguess = 700.0,
                      MAX_ITERATIONS=20):

    """
    1D heat transfer analysis at given station, given input conditions

    eps = Area Ratio @ current station
    M = mach number @ current station
    T0 = combustor stagnation temp [K] #~3200 for current design
    T_aw = combustor adiabatic wall temp, [K]
    b1..4 = bartz correlation paramters, computed as constants from stagnation conditions

    t_w = wall thickness [m]
    cond_w = wall conductivity [W/m.K] # 370 for copper (lowball)

    Tguess = 700; seed temperature to start iteration
    """
    # Prepare bartz calculation parameters - extract using desired ith station
    eps = chamber.at[i,'eps']
    M = chamber.at[i,'mach']
    AR_factor = (1/eps)**0.9 # expansion factor, (A*/A) ** 0.9



    T_wg = Tguess # seed initial guess
    converged = False
    j = 0
    while not converged:
        # calculate bartz w/ current guess
        omega = bartz_correction_factor(T0, T_wg, M, k)
        bartz_mult = b_const*AR_factor
        #chamber.at[i,'h_wg'] = b_const * AR_factor * omega
        #q_wg = chamber.at[i,'h_wg'] * (T_aw - T_wg)

        # bartz calc of wall temp
        T_wc_hg = T_wg - (q_wg * t_w) / cond_w # convert wall thickness to meters

        # nusselt calc of coolant wall temp
        T_wc_c = (q_wg/chamber.at[i,'h_c']) + chamber.at[i,'T_c_i']
        # hotwall temp for above coolant wall temp
        T_wg_new = T_wc_c + (q_wg * t_w)/cond_w

        # Check Convergence Criteria
        conv = (T_wg - T_wg_new)/T_wg # calculate the delta/avg ratio
        if np.abs(conv) < convergence:
            T_wc = T_wc_hg
            converged = True
        elif j > MAX_ITERATIONS:
            print(f'Exceeded {MAX_ITERATIONS} # of Iterations, proceeding with convergence of {conv}')
            T_wc = T_wc_hg
            break
        else:
            print(j)
            print(T_wc_c)
            print(T_wc_hg)
            print(T_wg_new)
            print(conv)
            T_wg = T_wg_new
            j = j+1



    chamber.at[i, 'T_c_e'] = chamber.at[i,'T_c_i'] + chamber.at[i,'dT_c']
    chamber.at[i-1,'T_c_i'] = chamber.at[i,'T_c_e']
    chamber.at[i, 'q'] = q_wg
    chamber.at[i, 'T_wg'] = T_wg
    chamber.at[i, 'T_wc'] = T_wc

    return chamber